[{"/Users/Omar/Desktop/todo-list/Todo-app/src/index.js":"1","/Users/Omar/Desktop/todo-list/Todo-app/src/App.js":"2","/Users/Omar/Desktop/todo-list/Todo-app/src/reportWebVitals.js":"3","/Users/Omar/Desktop/todo-list/Todo-app/src/components/ToDo.jsx":"4","/Users/Omar/Desktop/todo-list/Todo-app/src/components/UpdateForm.jsx":"5","/Users/Omar/Desktop/todo-list/Todo-app/src/components/AddTaskForm.jsx":"6"},{"size":535,"mtime":1653076198439,"results":"7","hashOfConfig":"8"},{"size":4901,"mtime":1653469224734,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1653076198443,"results":"10","hashOfConfig":"8"},{"size":64,"mtime":1653469525601,"results":"11","hashOfConfig":"8"},{"size":76,"mtime":1653469527743,"results":"12","hashOfConfig":"8"},{"size":78,"mtime":1653469532980,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1crh50t",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"17"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"17"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"17"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"/Users/Omar/Desktop/todo-list/Todo-app/src/index.js",[],[],[],"/Users/Omar/Desktop/todo-list/Todo-app/src/App.js",["37","38","39"],[],"import React,{useState} from 'react';\nimport AddTaskForm from './components/AddTaskForm.jsx';\nimport ToDo from './components/ToDo.jsx';\nimport UpdateForm from './components/UpdateForm.jsx';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faCircleCheck, faPen, faTrashCan\n} from '@fortawesome/free-solid-svg-icons'\nimport './App.css';\n\nfunction App() {\n\n  const [toDo, setToDo] = useState([\n    \n    \n\n  ]);\n\n  const [newTask, setNewTask] = useState('');\n  const [updateData, setUpdateData] = useState('');\n\n  //Add task\n  const addTask =()=>{\n    if(newTask){\n      let num=toDo.length +1;\n      let newEntry= {id:num,title:newTask,status:false}\n      setToDo([...toDo,newEntry])\n      setNewTask('')\n    }\n\n  }\n  //-----------------------------------\n  //Delete task\n  const deleteTask =(id)=>{\n    let newTasks=toDo.filter(task =>task.id !== id)\n    setToDo(newTasks);\n    \n  }\n  //-----------------------------------\n  //Mark task as done or Completed\n  const markDone =(id)=>{\n    const newTask=toDo.map(task => {\n      if(task.id === id){                                                             \n        return({...task,status: !task.status })\n      }\n      return task;\n    })\n    setToDo(newTask);\n  }\n  //-----------------------------------\n  //Cancel update\n  const cancelUpdate =()=>{\n    setUpdateData('');\n    \n  }\n  //-----------------------------------\n  // change task for update\n  const changeTask =(e)=>{\n    let newEntry={\n     id: updateData.id,\n     title: e.target.value,\n     status:updateData.status ? true : false\n    }\n    setUpdateData(newEntry);\n\n    \n  }\n  //-----------------------------------\n  //Update task\n  const updateTask =()=>{\n    let filterRecords =[...toDo].filter(task =>task.id !== updateData.id);\n    let updatedObject = [...filterRecords,updateData]\n    setToDo(updatedObject);\n    setUpdateData('');\n    \n  }\n\n\n\n  return (\n    <div className=\"container App\"> \n\n        <br></br>\n        <h2>To Do List App</h2>\n        <br></br>\n\n        {/* //Update Task */}\n        {updateData && updateData.title ? (\n\n          <>\n          <div className='row'>\n              <div className='col'>\n                <input \n                value={ updateData && updateData.title}\n                onChange={(e) => changeTask(e)}\n                className='form-control form-control-lg'/>\n              </div>\n              <div className='col-auto'>\n                <button \n                onClick={updateTask}\n                className='btn btn-lg btn-success mr-20'>\n                  Update\n                </button>\n                <buttom \n                onClick={cancelUpdate}\n                className =\"btn btn-lg btn-warning\">\n                  Cancel\n                </buttom>\n              </div>\n        </div>\n        <br/>\n          </>\n\n        ) : (\n          <>\n          {/* //Add Task */}\n        <div className='row'>\n              <div className='col'>\n                    <input \n                    value={newTask}\n                    onChange={(e) => setNewTask(e.target.value)}\n                    className='form-control form-control-lg'/>\n                  </div>\n                  <div className='col-auto'>\n                    <button \n                    onClick={addTask}\n                    className='btn btn-lg btn-success'>Add Task</button>\n                \n              </div>\n\n        </div>\n        <br/>\n          </>\n        )} \n        \n\n       \n\n     {toDo && toDo.length ? '' : 'No Tasks...'}\n     {toDo && toDo\n     .sort((a,b)=>a.id>b.id ?1 : -1) // it keeps task on order\n     .map((task, index) =>{\n       return(\n         <React.Fragment key={task.id}>\n            \n          <div className=\"col taskBg\">\n            <div className={task.status ? 'done' : ''}>\n            <span className='taskNumber'>{index +1}</span>\n            <span className='taskText'>{task.title}</span>\n\n            </div>\n              \n            <div className='iconsWrap'>\n              <span title = \"Completed / Not Completed\"\n              onClick={(e) =>markDone(task.id)}>\n                <FontAwesomeIcon icon={faCircleCheck}/>\n              </span>\n               \n               {task.status ? null :(\n                 <span title=\"Edit\"\n                 onClick={() =>setUpdateData ({\n                   id:task.id,\n                   title:task.title,\n                   status:task.status ? true : false\n                   })}>\n                <FontAwesomeIcon icon={faPen}/>\n              </span>\n               )}\n              \n\n              <span title='Delete' \n              onClick={() => deleteTask(task.id)}>\n              <FontAwesomeIcon icon={faTrashCan}/>\n              </span>\n\n            </div>\n\n          </div>\n          \n\n           \n\n         </React.Fragment>\n       )\n     })\n     }\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/Omar/Desktop/todo-list/Todo-app/src/reportWebVitals.js",[],[],"/Users/Omar/Desktop/todo-list/Todo-app/src/components/ToDo.jsx",["40"],[],"const ToDo =({ }) =>{\n    return(\n\n    )\n}\n\nexport default ToDo;","/Users/Omar/Desktop/todo-list/Todo-app/src/components/UpdateForm.jsx",["41"],[],"const UpdateForm =({ }) =>{\n    return(\n\n    )\n}\n\nexport default UpdateForm;","/Users/Omar/Desktop/todo-list/Todo-app/src/components/AddTaskForm.jsx",["42"],[],"const AddTaskForm =({ }) =>{\n    return(\n\n    )\n}\n\nexport default AddTaskForm;",{"ruleId":"43","severity":1,"message":"44","line":2,"column":8,"nodeType":"45","messageId":"46","endLine":2,"endColumn":19},{"ruleId":"43","severity":1,"message":"47","line":3,"column":8,"nodeType":"45","messageId":"46","endLine":3,"endColumn":12},{"ruleId":"43","severity":1,"message":"48","line":4,"column":8,"nodeType":"45","messageId":"46","endLine":4,"endColumn":18},{"ruleId":null,"fatal":true,"severity":2,"message":"49","line":4,"column":4},{"ruleId":null,"fatal":true,"severity":2,"message":"49","line":4,"column":4},{"ruleId":null,"fatal":true,"severity":2,"message":"49","line":4,"column":4},"no-unused-vars","'AddTaskForm' is defined but never used.","Identifier","unusedVar","'ToDo' is defined but never used.","'UpdateForm' is defined but never used.","Parsing error: Unexpected token (4:4)"]