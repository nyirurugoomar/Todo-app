[{"/Users/Omar/Desktop/todo-list/Todo-app/src/index.js":"1","/Users/Omar/Desktop/todo-list/Todo-app/src/App.js":"2","/Users/Omar/Desktop/todo-list/Todo-app/src/reportWebVitals.js":"3"},{"size":535,"mtime":1653076198439,"results":"4","hashOfConfig":"5"},{"size":4108,"mtime":1653310379719,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1653076198443,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"1crh50t",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"/Users/Omar/Desktop/todo-list/Todo-app/src/index.js",[],[],[],"/Users/Omar/Desktop/todo-list/Todo-app/src/App.js",["19","20","21"],[],"import React,{useState} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faCircleCheck, faPen, faTrashCan\n} from '@fortawesome/free-solid-svg-icons'\nimport './App.css';\n\nfunction App() {\n\n  const [toDo, setToDo] = useState([\n    {id: 1 ,title: \"Task 1\" ,status: false},\n    {id: 2 ,title: \"Task 2\" ,status: false},\n    \n\n  ]);\n\n  const [newTask, setNewTask] = useState('');\n  const [updateData, setUpdateData] = useState('');\n\n  //Add task\n  const addTask =()=>{\n    if(newTask){\n      let num=toDo.length +1;\n      let newEntry= {id:num,title:newTask,status:false}\n      setToDo([...toDo,newEntry])\n      setNewTask('')\n    }\n\n  }\n  //-----------------------------------\n  //Delete task\n  const deleteTask =(id)=>{\n    let newTasks=toDo.filter(task =>task.id !== id)\n    setToDo(newTasks);\n    \n  }\n  //-----------------------------------\n  //Mark task as done or Completed\n  const markDone =(id)=>{\n    const newTask=toDo.map(task => {\n      if(task.id === id){                                                             \n        return({...task,status: !task.status })\n      }\n      return task;\n    })\n    setToDo(newTask);\n  }\n  //-----------------------------------\n  //Cancel update\n  const cancelUpdate =()=>{\n    setUpdateData('');\n    \n  }\n  //-----------------------------------\n  // change task for update\n  const changeTask =(e)=>{\n    \n  }\n  //-----------------------------------\n  //Update task\n  const updateTask =()=>{\n    \n  }\n\n\n\n  return (\n    <div className=\"container App\"> \n\n        <br></br>\n        <h2>To Do List App</h2>\n        <br></br>\n\n        {/* //Update Task */}\n        <div className='row'>\n          <div className='col'>\n            <input \n            value={ updateData && updateData.title}\n            className='form-control form-control-lg'/>\n          </div>\n          <div className='col-auto'>\n            <button className='btn btn-lg btn-success mr-20'>\n              Update\n            </button>\n            <buttom className =\"btn btn-lg btn-warning\">\n               Cancel\n            </buttom>\n          </div>\n        </div>\n        <br/>\n\n       {/* //Add Task */}\n        <div className='row'>\n              <div className='col'>\n                <input \n                value={newTask}\n                onChange={(e) => setNewTask(e.target.value)}\n                className='form-control form-control-lg'/>\n              </div>\n              <div className='col-auto'>\n                <button \n                onClick={addTask}\n                className='btn btn-lg btn-success'>Add Task</button>\n                \n              </div>\n\n        </div>\n        <br/>.\n\n     {toDo && toDo.length ? '' : 'No Tasks...'}\n     {toDo && toDo\n     .sort((a,b)=>a.id>b.id ?1 : -1) // it keeps task on order\n     .map((task, index) =>{\n       return(\n         <React.Fragment key={task.id}>\n            \n          <div className=\"col taskBg\">\n            <div className={task.status ? 'done' : ''}>\n            <span className='taskNumber'>{index +1}</span>\n            <span className='taskText'>{task.title}</span>\n\n            </div>\n              \n            <div className='iconsWrap'>\n              <span title = \"Completed / Not Completed\"\n              onClick={(e) =>markDone(task.id)}>\n                <FontAwesomeIcon icon={faCircleCheck}/>\n              </span>\n               \n               {task.status ? null :(\n                 <span title=\"Edit\"\n                 onClick={() =>setUpdateData ({\n                   id:task.id,\n                   title:task.title,\n                   status:task.status ? true : false\n                   })}>\n                <FontAwesomeIcon icon={faPen}/>\n              </span>\n               )}\n              \n\n              <span title='Delete' \n              onClick={() => deleteTask(task.id)}>\n              <FontAwesomeIcon icon={faTrashCan}/>\n              </span>\n\n            </div>\n\n          </div>\n          \n\n           \n\n         </React.Fragment>\n       )\n     })\n     }\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/Omar/Desktop/todo-list/Todo-app/src/reportWebVitals.js",[],[],{"ruleId":"22","severity":1,"message":"23","line":51,"column":9,"nodeType":"24","messageId":"25","endLine":51,"endColumn":21},{"ruleId":"22","severity":1,"message":"26","line":57,"column":9,"nodeType":"24","messageId":"25","endLine":57,"endColumn":19},{"ruleId":"22","severity":1,"message":"27","line":62,"column":9,"nodeType":"24","messageId":"25","endLine":62,"endColumn":19},"no-unused-vars","'cancelUpdate' is assigned a value but never used.","Identifier","unusedVar","'changeTask' is assigned a value but never used.","'updateTask' is assigned a value but never used."]